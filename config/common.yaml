# --- Defaults ---

# --- pymarl options ---
runner: "episode" # Runs 1 env for an episode
seed: 2
alg: "quantilemix"   # double_quantile, tr_lmix
mac: "basic_mac" # Basic controller
env: "sc2" # Environment name
env_args: {} # Arguments for the environment
evaluate_cycle: 5000 # Test after {} timesteps have passed
test_greedy: True # Use greedy evaluation (if False, will set epsilon floor to 0
n_steps: 500000 # Stop running after this many timesteps
device: "cuda" # Use gpu by default unless it isn't available
n_episodes: 1
replay_dir: 

# --- Logging options ---
use_tensorboard: True # Log results to tensorboard
save_model: False # Save the models to disk
checkpoint_path: "" # Load a checkpoint from this path
evaluate: False # Evaluate model for test_nepisode episodes and quit (no training)
load_step: 0 # Load model trained on this many timesteps (0 if choose max possible)
save_replay: False # Saving the replay of the model loaded from checkpoint_path
local_results_path: "results" # Path for local results
evaluate_epoch: 32
load_model: False
evaluate: False
cuda: True
td_type: td_lambda
q_total_type: individual
qmix_type: mix2
td_lambda: 0.95

# --- RL hyperparameters ---
gamma: 0.99
batch_size: 8 # Number of episodes to train on
buffer_size: 5000 # Size of the replay buffer
lr: 0.0005 # Learning rate for agents
optimizer: "RMS"
grad_norm_clip: 0.5 # Reduce magnitude of gradients above this L2 norm
rnn_hidden_dim: 64
qmix_hidden_dim: 64
qtran_hidden_dim: 64
v_hidden_dim: 64
epsilon: 1
anneal_epsilon: 0.00064
min_epsilon: 0.05
epsilon_steps: 100000

save_cycle: 5000
target_update_interval: 300
train_steps: 8
n_episodes: 1
two_hyper_layers: False
hyper_hidden_dim: 64
double_Q: False
lambda_soft_update: 0.005
hard_update: False

last_action: True
reuse_network: True
model_dir: ./model
result_dir: ./result
run_dir: ./
log_interval: 20
epsilon_anneal_scale: episode
target_update_cycle: 300